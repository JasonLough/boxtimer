{"version":3,"sources":["Countdown.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","props","state","days","hours","min","sec","this","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","millisec","Math","floor","clearInterval","value","String","length","className","addLeadingZeros","mins","showCombo","showCountdown","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAgJeA,G,kBA7IX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,IAAK,GAPM,E,iFAWE,IAAD,OAEhBC,KAAKC,SAAWC,aAAY,WACxB,IAAMC,EAAO,EAAKC,mBAAmB,EAAKV,MAAMS,MAChDA,EAAO,EAAKE,SAASF,GAAQ,EAAKG,SACnC,O,6CAIHN,KAAKM,S,yCAGUC,GACf,IAAIC,GAAQC,KAAKC,MAAM,IAAID,KAAKF,IAAYE,KAAKC,MAAM,IAAID,OAAW,IAGtE,GAAID,GAAQ,EAAG,OAAO,EAEtB,IAAMG,EAAW,CACbC,MAAO,EACPhB,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLc,SAAU,GAsBd,OAlBIL,GAAS,WACTG,EAASC,MAAQE,KAAKC,MAAMP,EAAI,UAChCA,GAAyB,OAAjBG,EAASC,MAAiB,OAElCJ,GAAQ,QACRG,EAASf,KAAOkB,KAAKC,MAAMP,EAAO,OAClCA,GAAwB,MAAhBG,EAASf,MAEjBY,GAAQ,OACRG,EAASd,MAAQiB,KAAKC,MAAMP,EAAO,MACnCA,GAAyB,KAAjBG,EAASd,OAEjBW,GAAQ,KACRG,EAASb,IAAMgB,KAAKC,MAAMP,EAAO,IACjCA,GAAuB,GAAfG,EAASb,KAErBa,EAASZ,IAAMS,EAERG,I,6BAIPK,cAAchB,KAAKC,Y,sCAGPgB,GAEZ,IADAA,EAAQC,OAAOD,GACRA,EAAME,OAAS,GAClBF,EAAQ,IAAMA,EAElB,OAAOA,I,kCAKP,OACI,yBAAKG,UAAU,uBACX,yBAAKA,UAAU,aACX,oCACA,wC,sCAOZ,OACI,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,iBACZ,0BAAMA,UAAU,yBACZ,gCAASpB,KAAKqB,gBAAgBrB,KAAKL,MAAMC,MAAzC,KACA,8BAA2B,IAApBI,KAAKL,MAAMC,KAAa,MAAQ,OAAvC,OAIR,0BAAMwB,UAAU,iBACZ,0BAAMA,UAAU,yBACZ,gCAASpB,KAAKqB,gBAAgBrB,KAAKL,MAAME,OAAzC,KACA,0CAKR,0BAAMuB,UAAU,iBACZ,0BAAMA,UAAU,yBACZ,gCAASpB,KAAKqB,gBAAgBrB,KAAKL,MAAMG,KAAzC,KACA,wCAIR,0BAAMsB,UAAU,iBACZ,0BAAMA,UAAU,yBACZ,gCAASpB,KAAKqB,gBAAgBrB,KAAKL,MAAMI,KAAzC,KACA,4C,+BAWpB,QAEaC,KAAKqB,gBAAgBrB,KAAKL,MAAMC,MAAS,MAEF,OAA1CI,KAAKqB,gBAAgBrB,KAAKL,MAAME,QACU,OAA1CG,KAAKqB,gBAAgBrB,KAAKL,MAAM2B,OACS,OAAzCtB,KAAKqB,gBAAgBrB,KAAKL,MAAMI,KAEtCC,KAAKuB,YAELvB,KAAKwB,oB,GAvIOC,IAAMC,YCefC,E,iLATX,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAWjB,KAAM,IAAIM,KAAK,qC,GANhBgB,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7ee04a3b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Countdown extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            days: 0,\n            hours: 0,\n            min: 0,\n            sec: 1\n        }\n    }\n\n    componentDidMount() {\n        // update every second\n        this.interval = setInterval(() => {\n            const date = this.calculateCountdown(this.props.date);\n            date ? this.setState(date) : this.stop();\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        this.stop();\n    }\n\n    calculateCountdown(endDate) {\n        let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n        // clear countdown when date is reached\n        if (diff <= 0) return false;\n\n        const timeLeft = {\n            years: 0,\n            days: 0,\n            hours: 0,\n            min: 0,\n            sec: 0,\n            millisec: 0,\n        };\n\n        // calculate time difference between now and expected date\n        if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n            timeLeft.years = Math.floor(diff / (365.25 * 86400));\n            diff -= timeLeft.years * 365.25 * 86400;\n        }\n        if (diff >= 86400) { // 24 * 60 * 60\n            timeLeft.days = Math.floor(diff / 86400);\n            diff -= timeLeft.days * 86400;\n        }\n        if (diff >= 3600) { // 60 * 60\n            timeLeft.hours = Math.floor(diff / 3600);\n            diff -= timeLeft.hours * 3600;\n        }\n        if (diff >= 60) {\n            timeLeft.min = Math.floor(diff / 60);\n            diff -= timeLeft.min * 60;\n        }\n        timeLeft.sec = diff;\n\n        return timeLeft;\n    }\n\n    stop() {\n        clearInterval(this.interval);\n    }\n\n    addLeadingZeros(value) {\n        value = String(value);\n        while (value.length < 2) {\n            value = '0' + value;\n        }\n        return value;\n    }\n\n    showCombo() {\n        \n        return (\n            <div className='imgContainer opened'>\n                <div className=\"Countdown\">\n                    <p>8-3-5</p>\n                    <p>4-9-7</p>\n                </div>\n            </div>\n        )\n    }\n\n    showCountdown() {\n        return (\n            <div className='imgContainer closed'>\n                <div className=\"Countdown\">\n                    <span className=\"Countdown-col\">\n                        <span className=\"Countdown-col-element\">\n                            <strong>{this.addLeadingZeros(this.state.days)} </strong>\n                            <span>{this.state.days === 1 ? 'Day' : 'Days'} </span>\n                        </span>\n                    </span>\n\n                    <span className=\"Countdown-col\">\n                        <span className=\"Countdown-col-element\">\n                            <strong>{this.addLeadingZeros(this.state.hours)} </strong>\n                            <span>Hours </span>\n                        </span>\n                    </span>\n\n\n                    <span className=\"Countdown-col\">\n                        <span className=\"Countdown-col-element\">\n                            <strong>{this.addLeadingZeros(this.state.min)} </strong>\n                            <span>Min </span>\n                        </span>\n                    </span>\n\n                    <span className=\"Countdown-col\">\n                        <span className=\"Countdown-col-element\">\n                            <strong>{this.addLeadingZeros(this.state.sec)} </strong>\n                            <span>Sec </span>\n                        </span>\n                    </span>\n\n                </div>\n            </div>\n        );\n\n    }\n\n    render() {\n        return (\n            ( \n                ( ~~(this.addLeadingZeros(this.state.days)) < '20') || // TEST box opened\n                //( this.addLeadingZeros(this.state.days) === '00') &&     // LIVE\n                ( this.addLeadingZeros(this.state.hours) ==='00') &&\n                ( this.addLeadingZeros(this.state.mins) === '00') &&\n                ( this.addLeadingZeros(this.state.sec) === '00') \n            ) ? \n            this.showCombo()\n            :\n            this.showCountdown()\n        )\n    }\n}\n\n\n\nexport default Countdown;","import React from 'react';\nimport './App.css';\nimport Countdown from './Countdown.js';\n\nclass App extends React.Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Countdown date={new Date('December 25, 2019 00:00:00')}></Countdown>        \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}